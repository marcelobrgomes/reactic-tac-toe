{"version":3,"sources":["serviceWorker.js","components/Button.jsx","main/Game.jsx","index.js"],"names":["Boolean","window","location","hostname","match","props","className","value","onClick","play","id","initialGameArray","row1","row2","row3","column1","column2","column3","diagonal1","diagonal2","useState","lastPlayer","setLastPlayer","gameArray","setGameArray","message","setMessage","gametype","setGameType","gameTypeDescription","setGameTypeDescription","gameOver","setGameOver","undefined","playerX","setPlayerX","playerO","setPlayerO","winner","setWinner","level","setLevel","computerFirstPositionPlayed","setComputerFirstPositionPlayed","i","checkGameOver","userPlay","computerPlay","Promise","resolve","reject","setTimeout","move","easyMove","hardMove","normalMove","then","Math","floor","random","includes","defenseMove","console","log","userWinningPossibilities","forEach","possibility","checkArray","position","push","defendedPossibilityIndex","possibilityToDefend","availablePosition","possibilitiesUserCanWinInTheNextMove","filter","length","lastIndexOf","restart","gameType","getGametypeDescription","type","onChange","e","target","defaultValue","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.02929cf2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport './Button.css'\n\nexport default props =>\n    <button \n        className={`button ${props.value === 'X' ? 'x' : ''} ${props.value === 'O' ? 'o' : ''}`}\n        onClick={() => props.play(props.id)}\n    >\n        {props.value}\n    </button>","import React, {useState} from 'react'\nimport './Game.css'\nimport Button from '../components/Button';\n\nconst initialGameArray = [null, null, null, null, null, null, null, null, null]\n\nconst row1 = [0,1,2]\nconst row2 = [3,4,5]\nconst row3 = [6,7,8]\n\nconst column1 = [0,3,6]\nconst column2 = [1,4,7]\nconst column3 = [2,5,8]\n\nconst diagonal1 = [2,4,6]\nconst diagonal2 = [0,4,8]\n\nconst LOCAL_MULTIPLAYER_GAME = 1\nconst LOCAL_SINGLEPLAYER_GAME = 2\n\nexport default props => {\n    let [lastPlayer, setLastPlayer] = useState('O')\n    let [gameArray, setGameArray] = useState([...initialGameArray])\n    let [message, setMessage] = useState('')\n    let [gametype, setGameType] = useState(LOCAL_SINGLEPLAYER_GAME)\n    let [gameTypeDescription, setGameTypeDescription] = useState('Singleplayer')\n    let [gameOver, setGameOver] = useState(false)\n    let [playerX, setPlayerX] = useState(undefined)\n    let [playerO, setPlayerO] = useState('Computer')\n    let [winner, setWinner] = useState(null)\n    let [level, setLevel] = useState('normal')\n    let [computerFirstPositionPlayed, setComputerFirstPositionPlayed] = useState(null)\n\n    const play = (i) => {\n        if(gameOver) {\n            return;\n        }\n\n        if(lastPlayer === 'O') {\n            gameArray[i] = 'X';\n            lastPlayer = 'X'\n        } else {\n            gameArray[i] = 'O';\n            lastPlayer = 'O'\n        }\n\n        setGameArray(gameArray)\n        setLastPlayer(lastPlayer)\n\n        checkGameOver()\n    }\n\n    const userPlay = (i) => {\n        if(gameArray[i] === 'X' || gameArray[i] === 'O') {\n            return;\n        }\n\n        play(i)\n        computerPlay()\n    }\n\n    /*\n    Levels:\n    - Easy: just random moves\n    - Normal: Defense moves\n    - Hard: Atack and defense moves\n    */\n    const computerPlay = () => {\n        if(gametype === LOCAL_SINGLEPLAYER_GAME) {\n            new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    let move\n        \n                    switch(level) {\n                        case 'easy':\n                            move = easyMove()\n                            break\n                        case 'hard':\n                            move = hardMove()\n                            break\n                        default:\n                            move = normalMove()\n                    }\n\n                    play(move)\n                    resolve(\"Your move\")\n                }, 1000)\n            }).then(() => {\n                checkGameOver()\n            })\n        }\n    }\n\n    const easyMove = () => {\n        let move = Math.floor(Math.random() * 9)\n\n        while(gameArray[move] !== null) {\n            if(!gameArray.includes(null)) {\n                return;\n            }\n            move = Math.floor(Math.random() * 9)\n        }\n\n        return move;\n    }\n\n    const normalMove = () => {\n        let move\n\n        if(!computerFirstPositionPlayed) {\n            console.log('first computer move')\n            move = easyMove()\n            setComputerFirstPositionPlayed(move)\n            return move\n        }\n\n        return defenseMove()\n    }\n\n    const defenseMove = () => {\n        let winningPossibilities = [row1, row2, row3, column1, column2, column3, diagonal1, diagonal2]\n        let userWinningPossibilities = []\n        \n        winningPossibilities.forEach(possibility => {\n            let checkArray = []\n\n            possibility.forEach((position, i)=>{\n                checkArray[i] = gameArray[position]\n            })\n\n            if(checkArray.includes(lastPlayer) && !checkArray.includes(lastPlayer === 'O' ? 'X' : 'O')) {\n                userWinningPossibilities.push([checkArray, possibility])\n            }\n        })\n\n        console.log('userWinningPossibilities', userWinningPossibilities)\n        \n        let possibilitiesUserCanWinInTheNextMove = userWinningPossibilities.filter(possibility => {\n            return possibility[0].filter(move => {\n                return move === null\n            }).length === 1\n        })\n        \n        console.log(`possibilitiesUserCanWinInTheNextMove`, possibilitiesUserCanWinInTheNextMove)\n        \n        let defendedPossibilityIndex\n        let possibilityToDefend\n        let availablePosition\n        \n        if(possibilitiesUserCanWinInTheNextMove.length > 0) {\n            //if exists more than one possibility of user wins in the next move, random choose a position for defend.\n            defendedPossibilityIndex = Math.floor(Math.random() * possibilitiesUserCanWinInTheNextMove.length)\n            possibilityToDefend = possibilitiesUserCanWinInTheNextMove[defendedPossibilityIndex]\n            availablePosition = possibilityToDefend[0].lastIndexOf(null);\n\n            console.log('Position of the user winning possibility', possibilityToDefend[1][availablePosition])\n            return possibilityToDefend[1][availablePosition]\n        }\n\n        defendedPossibilityIndex = Math.floor(Math.random() * userWinningPossibilities.length)\n        possibilityToDefend = userWinningPossibilities[defendedPossibilityIndex]\n\n        if(possibilityToDefend) {\n            availablePosition = possibilityToDefend[0].lastIndexOf(null);\n            console.log('User cannot win in the next move, so playing in a empty slot', possibilityToDefend[1][availablePosition])\n            return possibilityToDefend[1][availablePosition]\n        }\n        \n        return gameArray.lastIndexOf(null) //else, return the last available position\n    }\n\n    const hardMove = () => {\n        console.log('hard move')\n    }\n\n    const checkGameOver = () => {\n        let winningPossibilities = [row1, row2, row3, column1, column2, column3, diagonal1, diagonal2]\n        \n        winningPossibilities.forEach((possibility, i) => {\n            let checkArray = []\n\n            possibility.forEach((position, i)=>{\n                checkArray[i] = gameArray[position]\n            })\n            \n            if(checkArray.includes('X') && !checkArray.includes('O') && !checkArray.includes(null)) {\n                setMessage(`${playerX ? playerX : 'Player X'} wins!`)\n                setWinner(playerX)\n                setLastPlayer('0');\n                gameOver = true\n                return;\n            }\n            \n            if(checkArray.includes('O') && !checkArray.includes('X') && !checkArray.includes(null)) {\n                setMessage(`${playerO ? playerO : 'Player O'} wins!`)\n                setWinner(playerO)\n                setLastPlayer('X');\n                gameOver = true\n                return;\n            }\n        });\n\n        if(!gameOver && !gameArray.includes(null)) {\n            setMessage('Tie in the game!')\n\n            if(winner) {\n                setLastPlayer(winner === playerX ? 'O' : 'X')\n            }\n\n            gameOver = true\n        }\n\n        setGameOver(gameOver)\n    }\n\n    const restart = (gameType) => {\n        setGameArray([...initialGameArray])\n        setGameType(gameType)\n        setGameTypeDescription(getGametypeDescription(gameType))\n        setMessage(null)\n        setGameOver(false)\n        setComputerFirstPositionPlayed(null)\n        setLastPlayer(winner === playerX ? 'O' : 'X')\n\n        if(winner === 'Computer') {\n            gameArray = [...initialGameArray]\n            computerFirstPositionPlayed = null\n            gameOver = false\n            \n            computerPlay()\n        }\n    }\n\n    const getGametypeDescription = (gameType) => {\n        switch(gameType) {\n            case LOCAL_MULTIPLAYER_GAME:\n                return 'Local Multiplayer'\n            case LOCAL_SINGLEPLAYER_GAME:\n                return 'Singleplayer'\n        }\n\n        return ''\n    }\n\n    return (\n        <div className=\"container\">\n            <div>\n                <p className=\"gametype\">{gameTypeDescription}</p>\n                <div className=\"game\">\n                    <Button id=\"0\" play={userPlay} value={gameArray[0]}/>\n                    <Button id=\"1\" play={userPlay} value={gameArray[1]}/>\n                    <Button id=\"2\" play={userPlay} value={gameArray[2]}/>\n                    <Button id=\"3\" play={userPlay} value={gameArray[3]}/>\n                    <Button id=\"4\" play={userPlay} value={gameArray[4]}/>\n                    <Button id=\"5\" play={userPlay} value={gameArray[5]}/>\n                    <Button id=\"6\" play={userPlay} value={gameArray[6]}/>\n                    <Button id=\"7\" play={userPlay} value={gameArray[7]}/>\n                    <Button id=\"8\" play={userPlay} value={gameArray[8]}/>\n                </div>\n            </div>\n            <div className=\"options\">\n                <p className=\"playerName\">Player X: <input type=\"text\" id=\"playerOne\" value={playerX} onChange={(e) => setPlayerX(e.target.value)}/></p>\n                <p className=\"playerName\">Player O: <input type=\"text\" id=\"playerTwo\" value={playerO} onChange={(e) => setPlayerO(e.target.value)}/></p>\n                <div className=\"optionButtons\">\n                    <button onClick={()=> restart(LOCAL_SINGLEPLAYER_GAME)}>Singleplayer</button>\n                    <select id=\"level\" onChange={(e) => {restart(LOCAL_SINGLEPLAYER_GAME); setLevel(e.target.value)}} defaultValue=\"normal\">\n                        <option value=\"easy\">Easy</option>\n                        <option value=\"normal\">Normal</option>\n                        <option value=\"hard\">Hard</option>\n                    </select>\n                    <button onClick={()=> restart(LOCAL_MULTIPLAYER_GAME)}>Local Multiplayer</button>\n                </div>\n            </div>\n            <div className=\"message\">\n                <h2>{message}</h2>\n            </div>\n        </div>\n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Game from './main/Game'\n\nReactDOM.render(\n  <React.StrictMode>\n    <h1># Reactic-tac-toe #</h1>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}